<?xml version="1.0" encoding="utf-8"?>
<topic id="9da6fad5-c77e-491a-86b0-65d17283ad70" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->


		<para>
			Zet Universe as Platform is agnostic to data models of its users, enabling customers to define own ontologies and plug them into the default Ontology provided by Zet Universe:
		</para>
		
	</introduction>

	<section>
		<title>Dynamic Ontology</title>
		<content>


			<!--<mediaLink>
						  <image xlink:href="Ontologies-6"/>
					  </mediaLink>-->

			  <para>
				  Both developers and end users can extend the default Ontology. Developers can do that by adding and registering definitions of their custom <legacyBold>Kinds</legacyBold>, <legacyBold>Relationships</legacyBold>, and Properties as part of their plugins, while end users can use the built-in <legacyBold>Ontology Editor</legacyBold> (to be provided in the later releases).
			  </para>

		  </content>
			  
	  </section>

	  <section>
		  <title>Ontology Editor</title>
		  <content>
			  <para>
				  As a user, you can switch to Ontology Editor in the main window, to navigate through the hierarchy of the built-in and third-party Kinds, see their respective Properties and Relationships.
			  </para>

			  <mediaLink>
				  <image xlink:href="Ontologies-6"/>
			  </mediaLink>
		  </content>
	  </section>


    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
   

    <relatedTopics>
		<link topicType_id="DAC3A6A0-C863-4E5B-8F65-79EFC6A4BA09" xlink:href="7d16a426-9e57-42a1-90f1-80d8298cf755">How Do I Extend Ontology</link>
		<link topicType_id="DAC3A6A0-C863-4E5B-8F65-79EFC6A4BA09" xlink:href="825d8b37-4782-4f5c-9302-dddea15b38f2">How Do I Define Custom Kind</link>
		<link topicType_id="DAC3A6A0-C863-4E5B-8F65-79EFC6A4BA09" xlink:href="">How Do I Define Custom Relationship</link>
		<!--<link xlink:href="">How Do I Define Custom Property</link>-->
		
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
