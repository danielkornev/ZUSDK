<?xml version="1.0" encoding="utf-8"?>
<topic id="407c25cf-2499-4fa3-9778-1c094be37fc9" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>Both <legacyBold>IZetApp</legacyBold> and <legacyBold>IZetProcessor</legacyBold> require you to implement a common underlying interface, <legacyBold>IPlugin</legacyBold>, that is used to define all plugins for Zet Universe.</para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Plugin Description Properties</title>
		<steps class="ordered">
			<step>
				<content>
					<para>
						Define values for descriptional properties, such as <legacyBold>Id</legacyBold> (it should be a unique Guid), <legacyBold>Publisher</legacyBold>, <legacyBold>Title</legacyBold>, and <legacyBold>Version</legacyBold>.
					</para>
				</content>
			</step>
		</steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

	  <procedure>
		  <title>
			  Implement IPlugin Interface
		  </title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Declare private member ZetHost and implement public <legacyBold>IHost</legacyBold> property:
					  </para>
					  <code language="c#" source="Content\Code\IHost.cs">

					  </code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  Method invokation support is not currently required, thus implement Invoke() method as follows:
					  </para>
					  <code language="c#" source="Content\Code\Invoke.cs">

					  </code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  Implement OnConnection() method, retrieve IHost, cast it to IZetHost, retrieve IAppSettings, and use these values to continue initializing your plugin:
					  </para>
					  <code language="c#" source="Content\Code\OnConnection.cs">

					  </code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  Plugin disconnection is not currently supported; yet, this will be available in the future releases. For now, implement OnDisconnection() method:
					  </para>
					  <code language="c#" source="Content\Code\OnDisconnection.cs">

					  </code>
				  </content>
			  </step>
		  </steps>
	  </procedure>

	  <procedure>
		  <title>IAppSettings and Accounts</title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Declare private member _settings, and implement GetCurrentAppSettings() method:
					  </para>

					  <code language="c#" source="Content\Code\GetCurrentAppSettings.cs">

					  </code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  Decide if it needs support for more than one account, and define <legacyBold>AreMultipleAccountsAllowed</legacyBold> property accordingly.
					  </para>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  Use the IAppSettings.Accounts list as the one used for your IZetApp.Accounts property:
					  </para>

					  <code language="c#" source="Content\Code\Accounts.cs">

					  </code>
				  </content>
			  </step>
		  </steps>
	  </procedure>
	  
    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
		
		
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
