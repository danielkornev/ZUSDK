<?xml version="1.0" encoding="utf-8"?>
<topic id="f5459c77-4896-4b2a-893f-d5c78a32b527" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
		  Content is passed to and from Zet Universe as Entities. From a developer’s perspective, Entities are metadata elements, characterized by the <legacyBold>Kind</legacyBold> and an optional URI as a link to an external resource. From a user’s perspective, Entities (characterized by their Kinds) are everyday things that have semantically appropriate behavior, appearance, and actions. To access <legacyBold>Entities</legacyBold> in Zet Universe, you need to write a plugin.
	  </para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Create new C# Project for your Plugin in Visual Studio</title>
		<steps class="ordered">
			<step>
				<content>
					<para>
						Open Visual Studio. From the <legacyBold>File</legacyBold> menu choose <legacyBold>New</legacyBold>, then choose <legacyBold>Project</legacyBold>.
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						In the Project types pane, open or expand <legacyBold>Visual C#</legacyBold>, then - <legacyBold>Windows</legacyBold>, then - <legacyBold>Classic Desktop</legacyBold>
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						In the <legacyBold>Templates</legacyBold> pane, select <legacyBold>Class Library</legacyBold>.
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						In the <legacyBold>Name</legacyBold> box, type a meaningful name for your plugin.
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						In the <legacyBold>Location</legacyBold> box, enter the directory in which you want to save the project, or click <legacyBold>Browse</legacyBold> to navigate to the location.
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						The project is created and the Visual C# Editor is open showing Class1 of the project.
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						To work with Zet Universe <legacyBold>Kinds</legacyBold>, you must add a reference to 
						<externalLink>
							<linkText>
								ZU.Core.Developer
							</linkText>
							<linkAlternateText>
								ZU.Core.Developer NuGet package
							</linkAlternateText>
							<linkUri>
								https://www.nuget.org/packages/ZU.Core.Developer/
							</linkUri>
						</externalLink> NuGet package. 
						To do this, select <legacyBold>Manage NuGet Packages...</legacyBold> from the <legacyBold>Project</legacyBold> menu. 
					</para>
				</content>
			</step>

			<step>
				<content>
					<para>
						Depending on a kind of a plugin you want to build, <legacyBold>ZApp</legacyBold> or <legacyBold>Processor</legacyBold>, implement the necessary interface, <legacyBold>ZU.Plugins.IZetApp</legacyBold> or <legacyBold>ZU.Plugins.IZetProcessor</legacyBold>, respectively.
					</para>
				</content>

			</step>


		</steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

	  <buildInstructions>
		  <content>
			  <para>
				  The MSBuild build environment is integrated into Visual Studio and will automatically create project files with the extension "proj". A C# project file created automatically by Visual Studio has the ".csproj" extension, and a Visual Basic project file created automatically by Visual Studio has the ".vbproj" extension. Use <legacyBold>Build</legacyBold> menu, and <legacyBold>Build Solution</legacyBold> menu item to build your project.
			  </para>
		  </content>
	  </buildInstructions>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
		<link topicType_id="DAC3A6A0-C863-4E5B-8F65-79EFC6A4BA09" xlink:href="407c25cf-2499-4fa3-9778-1c094be37fc9">How Do I Implement ZApp Plugin</link>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
