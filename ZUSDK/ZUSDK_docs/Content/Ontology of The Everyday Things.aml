<?xml version="1.0" encoding="utf-8"?>
<topic id="5b1b08cc-1676-47c0-84f7-f4b3402147d2" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

		<para>
			We live surrounded with things. These things can be physical ones coming from our environment, or they can be products of our imagination, or, finally, be digital objects created as elements of virtual world built by computer applications, websites and games. Things we deal with, starting from documents and other files in our folders, to users in Facebook and emails in our inbox, seem to be natural to us. We constantly make different interactions with these things, switching from physical world to a virtual one back-n-force, referencing to them in our endless collaboration with friends and work colleagues. The patterns of interacting with digital objects were brought from the physical world by Internet and computer pioneers, and now these patterns are highly interconnected as we constantly transfer our experiences between our real and digital lives.
		</para>


	</introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
	  <section address="OntologyInZetUniverse">
		  <title>Ontology in Zet Universe</title>
		  <content>
			  
			  <para>Instead of computer strict understanding of classes and instances, things in Zet Universe are more familiar to the user; things are content.</para>

			  <para>In Zet Universe, we use the terms Entities and Kinds to speak of everyday things that have been augmented with rich metadata. Entities represent actual instances of data stored within the Zet Universe semantic storage platform, while Kinds represent semantic meaning of these Entities, and form a coherent vocabulary called the Ontology of the Everyday Things.</para>
		  </content>

		  <sections>
			  <section address="OntologyOrigins">
				  <title>Ontology Origins</title>
				  <content>
					  <para>
						  The term <legacyBold>Ontology</legacyBold> originally came from Greek language:
					  </para>

					  <para>
						  <legacyItalic>Ontos + Logia</legacyItalic>
					  </para>

					  <para>
						  (Gk) <legacyItalic>“being” + “the study of”</legacyItalic>
					  </para>

					  <para>
						  An ontology is a categorization of the world. One of the earliest Ontological concepts came from Plato: Platonic realism. It is the idea that everything that exists in reality has a corresponding conceptual truth that the extant thing is aspiring to be:
					  </para>

					  <list class="bullet">
						  <listItem>
							  <para>
								  There is a universal notion of ‘apple-ness’ that a real apple aspires to be
							  </para>
						  </listItem>

						  <listItem>
							  <para>
								  This is one implementation of the idea that things in reality can have conceptual counterparts that are used to categorize them
							  </para>
						  </listItem>
					  </list>

					  <para>
						  This framework is mimicked in most Ontologies across the world.
					  </para>

					  <para>
						  Some of the inspiring examples of well-known ontologies include the Periodic Table of the Elements, Linnaean taxonomy or Latin naming system for animals.
					  </para>

					  <para>
						  The latter one is a useful example of an Ontology because we can see how Ontologies are frequently ordered hierarchically.
					  </para>
				  </content>
			  </section>

			  <section address="OntologyHierarchy">
				  <title>Ontology and Hierarchy</title>
				  <content>
					  <para>
						  A hierarchy is a nice way to order concepts. Here we will re-use a simple explanation of ontology from the 
						  <externalLink>
							  <linkText>Practice Example 13.A</linkText>
							  <linkAlternateText>Part of the Exercises provided as part of Tools for Learning Artificial Intelligence at AISpace.org</linkAlternateText>
							  <linkUri>http://www.aispace.org/exercises/exercise13-a-1.shtml</linkUri>
						  </externalLink>
						  , an exercise published on the AISpace.org, to provide an illustration of hierarchy use to build an ontology for pizzas.
					  </para>

					  <para>
						  Here is a reference describing the Web Ontology Language (OWL). Consider the following visualization of a OWL ontology:
					  </para>

					  <mediaLink>
						  <image xlink:href="pizza2" placement="center"/>
					  </mediaLink>

					  <para>
						  Each word in the figure is a class and the arrows represent subclasses (e.g. Tomato is a subclass of Vegetable). Note that some of the class names in this ontology are purposefully misleading (for the purposes of this exercise).
					  </para>

					  <para>
						  These same concepts can be (and are) applied to other domains. For example, when organizations model their world, they care about how different objects (notably people) fit into a hierarchy.
					  </para>
				  </content>
			  </section>

			  <section address="BuildingBlocks">
				  <title>
					  Building Blocks
				  </title>
				  <content>
					  <para>
						  There are many ways to build an Ontology and we have already discussed a couple above. In general, Ontologies have up to three basic information carriers:
					  </para>

					  <list class="bullet">
						  <listItem>
							  <para>
								  Objects
							  </para>
						  </listItem>

						  <listItem>
							  <para>
								  Properties
							  </para>
						  </listItem>

						  <listItem>
							  <para>
								  Relationships
							  </para>
						  </listItem>
					  </list>

					  <para>
						  Also referred to as ‘Actors’, ‘Attributes’ and ‘Links’ especially in SNA (Social Network Analysis).
					  </para>

					  <para>
						  At Zet Universe, Inc., we allow for the use of all three information types. However, we understand Objects as a combination of <legacyBold>Entities</legacyBold> on the storage level and <legacyBold>Kinds</legacyBold> on the ontology level. Kinds can be built-in (say, Document, Person, Video, Audio, Web Page, etc.), or registered by a first-party or a third-party provider (say, Sticky Note, or Dropbox Folder). Why?
					  </para>
				  </content>
			  </section>

			  <section>
				  <title>Dynamic Ontology</title>
				  <content>
					  <para>
						  Zet Universe as Platform is agnostic to data models of its users, enabling customers to define own ontologies and plug them into the default Ontology of the Everyday Things provided by Zet Universe:
					  </para>

					  <!--<mediaLink>
						  <image xlink:href="Ontologies-6"/>
					  </mediaLink>-->

					  <para>
						  Both developers and end users can extend the default Ontology. Developers can do that by adding and registering definitions of their custom <legacyBold>Kinds</legacyBold> as part of their plugins, while end users can use the built-in <legacyBold>Ontology Editor</legacyBold> (to be provided in the later releases).
					  </para>

					  <para>
						  As a developer, you can learn more about extending Ontology in the corresponding topic, <link xlink:href="9da6fad5-c77e-491a-86b0-65d17283ad70">Extending Ontology</link>.
					  </para>
				  </content>
			  </section>
		  </sections>
	  </section>

	 

    <relatedTopics>
		<link xlink:href="9da6fad5-c77e-491a-86b0-65d17283ad70">Extending Ontology</link>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
