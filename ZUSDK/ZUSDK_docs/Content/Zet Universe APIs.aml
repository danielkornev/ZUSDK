<?xml version="1.0" encoding="utf-8"?>
<topic id="f1ae560b-ba87-4f1d-a8e7-1ec9020c9b2b" revisionNumber="1">
	<developerSDKTechnologyOverviewArchitectureDocument
	  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

		<!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

		<introduction>
			<para>The Zet Universe APIs are the primary way to programmatically interact with the information stored in the Zet Universe knowledge system. From this point of view, the Zet Universe APIs function as an object-relational and persistence framework optimized for client-side computing. This section provides extensive information, both introductory and advanced, about programming Zet Universe.</para>
		</introduction>

		<section>
			<title>Introduction</title>
			<content>
				<para>The Zet Universe exposes its features through a set of well-defined public interfaces. These cover high-level operations, such as Search, the pub/sub plug-in model provided by the <legacyBold>Semantic Pipeline Processor</legacyBold>, and the Kinds contained within the Models accessible as part of the so-called System Information Model. Together, these APIs allow external developers, web developers and ISVs to access and manipulate the data stored in Zet Universe.</para>

				<para>The functionality exposed by the public APIs include:</para>
				
				<list class="bullet">
					<listItem>
						<para>
							CRUD (Create, Retrieve, Update, Delete) support for operations on Kinds, Properties, Relationships, Models.
						</para>
					</listItem>

					<listItem>
						<para>
							Search
						</para>
					</listItem>

					<listItem>
						<para>
							Subscribe, unsubscribe, publish and retract
						</para>
					</listItem>

					<listItem>
						<para>
							Registering and unregistering different types of plug-ins (apps and processors)
						</para>
					</listItem>
				</list>

				<para>These functionalities are provided in several different interfaces:</para>

				<list class="bullet">
					<listItem>
						<para>
							<legacyBold>ZU.Core.Developer.dll</legacyBold>: A CLS-compliant .NET class library for applications.
						</para>
					</listItem>

					<listItem>
						<para>
							<legacyBold>Zet Universe Cloud Sync Platform</legacyBold>: REST APIs for data storage, sync, and collaboration (planned).
						</para>
					</listItem>
				</list>

					<!--<para>See the <legacyBold>Conceptual Content</legacyBold> topics in the Sandcastle Help File Builder's
help file for more information.  See the <legacyBold> Sandcastle MAML Guide</legacyBold> for details on Microsoft
Assistance Markup Language (MAML) which is used to create these topics.</para>-->
			</content>
		</section>

		<!-- <whatsNew>Optional "what's new" information</whatsNew> -->

		<relatedTopics>
			
			<link xlink:href="bf16b1ea-d376-468a-a5c2-e261bdd5f345">Zet Universe Technical Requirements Document</link>
			<link xlink:href="0fe31055-eea4-4dfe-bdcc-d11743749678">Zet Universe System Architecture</link>
			<link xlink:href="259c4f8b-fca0-46e0-a4fa-eab0f3fa39a0">Zet Universe Samples</link>
			<link xlink:href="de91e60d-3ca3-4a87-8017-7f67081626fd">How Do I...</link>
			<!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
		</relatedTopics>

	</developerSDKTechnologyOverviewArchitectureDocument>
</topic>
