<?xml version="1.0" encoding="utf-8"?>
<topic id="259c4f8b-fca0-46e0-a4fa-eab0f3fa39a0" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>The Zet Universe SDK includes samples that demonstrate Zet Universe features.</para>

		<para>The topics in this section provide explanations and instructions for running each sample.</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
	  <section>
		  <title>In This Section</title>
		  <content>
			  <list class="bullet">
				  <listItem>
					  <para>
						  <link xlink:href="3d8fea32-9e63-4a77-9d8b-427f1c8466c5">Processor Motivating Example</link> - The Zet Universe stores and indexes the user’s local content, subscriptions, visited web pages and content shared by their friends (via the corresponding plugins). As a result, a developer who specializes in new ways of indexing data or classifying data would want to write a plug-in that will be reliably loaded and invoked when content is added into the Semantic Processing Pipeline. For example, an entity extraction plug-in can be registered for /Content/FullText/ and automatically extract and link Kinds from the full-text previously extracted from the corresponding kinds that can be later used in search.
					  </para>
				  </listItem>

				  <listItem>
					  <para>
						  <link xlink:href="8146132c-e2ce-4fb7-8132-9384e184c6c8">App Motivating Example</link> - Default installation of Zet Universe is capable of storing and indexing manually provided user's local content stored in the local folders and (optionally) in the synchronized Dropbox folder. To enable Zet Universe to work with custom external data sources, a developer would want to write a plug-in that will be reliably loaded and will enable user to import data from the custom data source, such as Excel spreadsheet, or a Gmail tasks.
					  </para>
				  </listItem>

			  </list>

			  <!--<para>See the <legacyBold>Conceptual Content</legacyBold> topics in the Sandcastle Help File Builder's
help file for more information.  See the <legacyBold> Sandcastle MAML Guide</legacyBold> for details on Microsoft
Assistance Markup Language (MAML) which is used to create these topics.</para>-->
		  </content>
	  </section>

    <relatedTopics>
		<link xlink:href="f1ae560b-ba87-4f1d-a8e7-1ec9020c9b2b">Zet Universe APIs</link>

		<!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
